<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph xmlns="http://schemas.microsoft.com/vs/2009/dgml">
  <Nodes>
    <Node Id="40b5bbd2-1040-4406-a788-e7469a47df9c1" Bounds="29.9999846394857,-1841.76106599992,637.713333333333,342.57" Label="&#xD;&#xA;        public IBxFunctionModule GetFunctionModule(string id)&#xD;&#xA;        {&#xD;&#xA;            OPT.Product.Base.BxModulePath modulePath = BxSystemInfo.Instance.Regisries.GetModulePath(id);&#xD;&#xA;            if(modulePath == null)&#xD;&#xA;                return null;&#xD;&#xA;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                Assembly ass = Assembly.LoadFile(modulePath.DllFilePath);&#xD;&#xA;                object[] objs = ass.GetCustomAttributes(typeof(BxModulesAttribute), false);&#xD;&#xA;                IBxModules modules = (objs[0] as BxModulesAttribute).GetModules();&#xD;&#xA;                return modules.GetModule(id, BxModuleType.FuncionModule) as IBxFunctionModule;&#xD;&#xA;            }&#xD;&#xA;            catch (System.Exception e)&#xD;&#xA;            {&#xD;&#xA;                return null;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" UseManualLocation="True" />
    <Node Id="d2377e18-5c97-42b5-b86a-4b0d6e7dbf2c1" Bounds="-128.339286262629,-1393.1866430664,701.66,3003.12999999999" Label="       public void InitModuleTemplates()&#xD;&#xA;        {&#xD;&#xA;            List&lt;string&gt; modules = new List&lt;string&gt;();&#xD;&#xA;            List&lt;string&gt; templates = new List&lt;string&gt;();&#xD;&#xA;            List&lt;string&gt; pages = new List&lt;string&gt;();&#xD;&#xA;            List&lt;string&gt; groups = new List&lt;string&gt;();&#xD;&#xA;            List&lt;string&gt; names = new List&lt;string&gt;();&#xD;&#xA;            List&lt;string&gt; visibles = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;            //  获取注册表&#xD;&#xA;            string appConfigPath = BxSystemInfo.Instance.Regisries.GetApplicationConfigPath(_id);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            //  获取配置文件&#xD;&#xA;            string configFilePath = Path.Combine(appConfigPath, &quot;Config.xml&quot;);&#xD;&#xA;&#xD;&#xA;            XmlDocument doc = new XmlDocument();&#xD;&#xA;            //  加载XML&#xD;&#xA;            doc.Load(configFilePath);&#xD;&#xA;&#xD;&#xA;            //  获取节点&#xD;&#xA;            XmlElement applicationInfoNode = doc.DocumentElement.SelectSingleNode(&quot;ApplicationInfo&quot;) as XmlElement;&#xD;&#xA;&#xD;&#xA;            //  获取模块节点&#xD;&#xA;            XmlElement modulesNode = doc.DocumentElement.SelectSingleNode(&quot;Modules&quot;) as XmlElement;&#xD;&#xA;&#xD;&#xA;            //  获取模块所有子节点&#xD;&#xA;            XmlNodeList nodes = modulesNode.ChildNodes;&#xD;&#xA;&#xD;&#xA;            //  定义模块&#xD;&#xA;            IBxFunctionModule module;&#xD;&#xA;            List&lt;XmlNode&gt; deleteNodes = new List&lt;XmlNode&gt;();&#xD;&#xA;&#xD;&#xA;            foreach (XmlElement one in nodes)&#xD;&#xA;            {&#xD;&#xA;                //  获取当前节点ID&#xD;&#xA;                string moduleID = one.GetAttribute(&quot;id&quot;);&#xD;&#xA;&#xD;&#xA;                //  排除项&#xD;&#xA;                if (moduleID.ToUpper() == &quot;EXE&quot; || moduleID.ToUpper() == &quot;URL&quot;)&#xD;&#xA;                    continue;&#xD;&#xA;                //  反射得到当前模块&#xD;&#xA;                module = BxModulesManager.Instance.GetFunctionModule(moduleID);&#xD;&#xA;                if (module == null)&#xD;&#xA;                    continue;&#xD;&#xA;&#xD;&#xA;                //  如果不存在template节点&#xD;&#xA;                if (!one.HasAttribute(&quot;template&quot;))&#xD;&#xA;                {&#xD;&#xA;                    deleteNodes.Add(one);&#xD;&#xA;&#xD;&#xA;                    //  遍历模块定义子功能&#xD;&#xA;                    foreach (IBxModuleTemplateInfo ti in module.ModuleTemplates)&#xD;&#xA;                    {&#xD;&#xA;&#xD;&#xA;                        //  遍历初本节点以外的其他配置节点&#xD;&#xA;                        foreach (XmlElement one1 in nodes)&#xD;&#xA;                        {&#xD;&#xA;&#xD;&#xA;                            //  排除本节点&#xD;&#xA;                            if (one == one1)&#xD;&#xA;                                continue;&#xD;&#xA;&#xD;&#xA;                            //  获取ID&#xD;&#xA;                            string moduleID1 = one1.GetAttribute(&quot;id&quot;);&#xD;&#xA;                            //  排除模型&#xD;&#xA;                            if (moduleID1.ToUpper() == &quot;EXE&quot; || moduleID1.ToUpper() == &quot;URL&quot;)&#xD;&#xA;                                continue;&#xD;&#xA;&#xD;&#xA;                            //  获取模块&#xD;&#xA;                            IBxFunctionModule module1 = BxModulesManager.Instance.GetFunctionModule(moduleID1);&#xD;&#xA;                            if (module1 == null)&#xD;&#xA;                                continue;&#xD;&#xA;&#xD;&#xA;                            //  获取所有子功能&#xD;&#xA;                            foreach (IBxModuleTemplateInfo ti1 in module1.ModuleTemplates)&#xD;&#xA;                            {&#xD;&#xA;                                if (ti.MenuInfo.Name == ti1.MenuInfo.Name)&#xD;&#xA;                                {&#xD;&#xA;                                    ti.SameName = true;&#xD;&#xA;                                    break;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                            if (ti.SameName)&#xD;&#xA;                                break;&#xD;&#xA;                        }&#xD;&#xA;                        modules.Add(module.ID);&#xD;&#xA;                        pages.Add(ti.MenuInfo.PageName);&#xD;&#xA;                        groups.Add(ti.MenuInfo.GroupName);&#xD;&#xA;                        names.Add(ti.MenuInfo.Name);&#xD;&#xA;                        string tm = ti.Template;&#xD;&#xA;                        if (tm == null)&#xD;&#xA;                            tm = &quot;&quot;;&#xD;&#xA;                        templates.Add(tm);&#xD;&#xA;                        visibles.Add(&quot;true&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                //  存在template节点&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    //  获取子功能&#xD;&#xA;                    string tm = one.GetAttribute(&quot;template&quot;);&#xD;&#xA;&#xD;&#xA;                    //  不是空&#xD;&#xA;                    if (!string.IsNullOrWhiteSpace(tm))&#xD;&#xA;                    {&#xD;&#xA;&#xD;&#xA;                        bool delete = true;&#xD;&#xA;&#xD;&#xA;                        //  遍历模型子功能&#xD;&#xA;                        foreach (IBxModuleTemplateInfo ti in module.ModuleTemplates)&#xD;&#xA;                        {&#xD;&#xA;                            //  子功能名称等于template名称&#xD;&#xA;                            if (ti.Template == tm)&#xD;&#xA;                            {&#xD;&#xA;                                delete = false;&#xD;&#xA;                            }&#xD;&#xA;                            else&#xD;&#xA;                            {&#xD;&#xA;&#xD;&#xA;                                bool add = true;&#xD;&#xA;                                //  遍历其他所有节点&#xD;&#xA;                                foreach (XmlElement one1 in nodes)&#xD;&#xA;                                {&#xD;&#xA;                                    if (one == one1)&#xD;&#xA;                                        continue;&#xD;&#xA;                                    //  注册文件ID 和 template字段&#xD;&#xA;                                    string moduleID1 = one.GetAttribute(&quot;id&quot;);&#xD;&#xA;                                    string template1 = one.GetAttribute(&quot;template&quot;);&#xD;&#xA;&#xD;&#xA;                                    //  ID和template全部相等的视为重复不添加&#xD;&#xA;                                    if (moduleID == moduleID1 &amp;&amp; tm == template1)&#xD;&#xA;                                    {&#xD;&#xA;                                        add = false;&#xD;&#xA;                                        break;&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                                if (add)&#xD;&#xA;                                {&#xD;&#xA;                                    string tm1 = ti.Template;&#xD;&#xA;                                    if (tm1 == null)&#xD;&#xA;                                        tm1 = &quot;&quot;;&#xD;&#xA;                                    //  增加模块类型&#xD;&#xA;                                    modules.Add(module.ID);&#xD;&#xA;                                    //  增加页名称 开始&#xD;&#xA;                                    pages.Add(ti.MenuInfo.PageName);&#xD;&#xA;                                    //  增加分组 功能&#xD;&#xA;                                    groups.Add(ti.MenuInfo.GroupName);&#xD;&#xA;                                    //  增加模块名称 &#xD;&#xA;                                    names.Add(ti.MenuInfo.Name);&#xD;&#xA;                                    //  增加子功能&#xD;&#xA;                                    templates.Add(tm1);&#xD;&#xA;                                    //  显示&#xD;&#xA;                                    visibles.Add(&quot;false&quot;);&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                        if (delete)&#xD;&#xA;                            //  要删除的节点&#xD;&#xA;                            deleteNodes.Add(one);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            foreach (XmlNode one in deleteNodes)&#xD;&#xA;                modulesNode.RemoveChild(one);&#xD;&#xA;            //modulesNode.RemoveAll();&#xD;&#xA;&#xD;&#xA;            if (modules.Count == 0)&#xD;&#xA;                return;&#xD;&#xA;            //  写入配置文件&#xD;&#xA;            for (int i = 0; i &lt; modules.Count; i++)&#xD;&#xA;            {&#xD;&#xA;                XmlElement tmNode = doc.CreateElement(&quot;Module&quot;);&#xD;&#xA;                modulesNode.AppendChild(tmNode);&#xD;&#xA;                if (tmNode == null)&#xD;&#xA;                    continue;&#xD;&#xA;                tmNode.SetAttribute(&quot;id&quot;, modules[i]);&#xD;&#xA;                tmNode.SetAttribute(&quot;template&quot;, templates[i]);&#xD;&#xA;                tmNode.SetAttribute(&quot;page&quot;, pages[i]);&#xD;&#xA;                tmNode.SetAttribute(&quot;group&quot;, groups[i]);&#xD;&#xA;                tmNode.SetAttribute(&quot;name&quot;, names[i]);&#xD;&#xA;                tmNode.SetAttribute(&quot;visible&quot;, visibles[i]);&#xD;&#xA;            }&#xD;&#xA;            System.IO.File.SetAttributes(configFilePath, System.IO.FileAttributes.Normal);&#xD;&#xA;            doc.Save(configFilePath);&#xD;&#xA;        }" UseManualLocation="True" />
    <Node Id="eac775bd-b008-42bc-b713-f69fed0a9aff1" Bounds="-940.002619595963,-1370.24131010356,777.663333333333,4966.87666666667" Label="        void InitMenu()&#xD;&#xA;        {&#xD;&#xA;            _templates.Clear();&#xD;&#xA;            &#xD;&#xA;            BxHeadTailMenuBar bar = _mainWindow.BaseRibbionMenu.HeadTailMenuBar;&#xD;&#xA;&#xD;&#xA;            int index = 100;&#xD;&#xA;&#xD;&#xA;            RibbonPage pageStart = bar.HeadPageByName(_rs.TextByID(StringID.Page_Start));&#xD;&#xA;            if (pageStart == null)&#xD;&#xA;                pageStart = bar.AddHeadPage(_rs.TextByID(StringID.Page_Start));&#xD;&#xA;&#xD;&#xA;            //实例管理&#xD;&#xA;            RibbonPageGroup groupView = new RibbonPageGroup(_rs.TextByID(StringID.Instance));&#xD;&#xA;            groupView.AllowTextClipping = false;&#xD;&#xA;            groupView.ShowCaptionButton = false;&#xD;&#xA;            pageStart.Groups.Add(groupView);&#xD;&#xA;            groupView.Name = _rs.TextByID(StringID.Instance);&#xD;&#xA;            BarButtonItem itemT = new BarButtonItem();&#xD;&#xA;            itemT.PaintStyle = BarItemPaintStyle.CaptionGlyph;&#xD;&#xA;            itemT.Id = index;&#xD;&#xA;            index++;&#xD;&#xA;            itemT.Caption = _rs.TextByID(StringID.Open);&#xD;&#xA;            itemT.Glyph = global::TestApp1.Properties.Resources.Open_16x16;&#xD;&#xA;            itemT.ItemClick += OpenInstance_Click;&#xD;&#xA;            groupView.Ribbon.Items.Add(itemT);&#xD;&#xA;            groupView.ItemLinks.Add(itemT);&#xD;&#xA;            itemT = new BarButtonItem();&#xD;&#xA;            itemT.PaintStyle = BarItemPaintStyle.CaptionGlyph;&#xD;&#xA;            itemT.Id = index;&#xD;&#xA;            index++;&#xD;&#xA;            itemT.Caption = _rs.TextByID(StringID.Save);&#xD;&#xA;            itemT.Glyph = global::TestApp1.Properties.Resources.Save_16x16;&#xD;&#xA;            itemT.ItemClick += SaveInstance_Click;&#xD;&#xA;            groupView.Ribbon.Items.Add(itemT);&#xD;&#xA;            groupView.ItemLinks.Add(itemT);&#xD;&#xA;            itemT = new BarButtonItem();&#xD;&#xA;            itemT.PaintStyle = BarItemPaintStyle.CaptionGlyph;&#xD;&#xA;            itemT.Id = index;&#xD;&#xA;            index++;&#xD;&#xA;            itemT.Caption = _rs.TextByID(StringID.SaveAs);&#xD;&#xA;            itemT.Glyph = global::TestApp1.Properties.Resources.SaveAs_16x16;&#xD;&#xA;            itemT.ItemClick += SaveInstanceAs_Click;&#xD;&#xA;            groupView.Ribbon.Items.Add(itemT);&#xD;&#xA;            groupView.ItemLinks.Add(itemT);&#xD;&#xA;&#xD;&#xA;            _funcInitIndex = index;&#xD;&#xA;            RibbonPage page = null;&#xD;&#xA;            RibbonPageGroup group = null;&#xD;&#xA;            BarButtonItem item = null;&#xD;&#xA;            if (_applicationInfo.ID == &quot;ProdAna&quot; || _applicationInfo.ID == &quot;ProdAnaforGas&quot;)&#xD;&#xA;            {&#xD;&#xA;                for (int i = 0; i &lt; _applicationInfo.Modules.Count; i++)&#xD;&#xA;                {&#xD;&#xA;                    IBxFunctionModule one = _applicationInfo.Modules[i];&#xD;&#xA;                    foreach (IBxModuleTemplateInfo ti in one.ModuleTemplates)&#xD;&#xA;                    {&#xD;&#xA;                        bool show = false;&#xD;&#xA;                        int tIndex = 0;&#xD;&#xA;                        for (int j = 0; j &lt; _applicationInfo.Templates[i].Count; j++)&#xD;&#xA;                        {&#xD;&#xA;                            if (string.IsNullOrWhiteSpace(_applicationInfo.Templates[i][j]) || _applicationInfo.Templates[i][j] == ti.Template)&#xD;&#xA;                            {&#xD;&#xA;                                show = true;&#xD;&#xA;                                tIndex = j;&#xD;&#xA;                                break;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                        if (!show)&#xD;&#xA;                            continue;&#xD;&#xA;                        string pageInfo = ti.MenuInfo.PageName;&#xD;&#xA;                        string groupInfo = ti.MenuInfo.GroupName;&#xD;&#xA;                        string nameInfo = ti.MenuInfo.Name;&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(_applicationInfo.Pages[i][tIndex]))&#xD;&#xA;                            pageInfo = _applicationInfo.Pages[i][tIndex];&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(_applicationInfo.Groups[i][tIndex]))&#xD;&#xA;                            groupInfo = _applicationInfo.Groups[i][tIndex];&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(_applicationInfo.Names[i][tIndex]))&#xD;&#xA;                            nameInfo = _applicationInfo.Names[i][tIndex];&#xD;&#xA;&#xD;&#xA;                        page = bar.HeadPageByName(pageInfo);&#xD;&#xA;                        if (page == null)&#xD;&#xA;                            page = bar.AddHeadPage(pageInfo);&#xD;&#xA;&#xD;&#xA;                        group = page.GetGroupByName(groupInfo);&#xD;&#xA;                        if (group == null)&#xD;&#xA;                        {&#xD;&#xA;                            group = new RibbonPageGroup(groupInfo);&#xD;&#xA;                            group.AllowTextClipping = false;&#xD;&#xA;                            group.ShowCaptionButton = false;&#xD;&#xA;                            page.Groups.Add(group);&#xD;&#xA;                            group.Name = groupInfo;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        item = new BarButtonItem();&#xD;&#xA;                        item.Id = index;&#xD;&#xA;                        item.Caption = nameInfo;&#xD;&#xA;                        if (ti.MenuInfo.HelpString.Count &gt; 0)&#xD;&#xA;                        {&#xD;&#xA;                            item.SuperTip = new SuperToolTip();&#xD;&#xA;                            foreach (string s in ti.MenuInfo.HelpString)&#xD;&#xA;                            {&#xD;&#xA;                                ToolTipItem toolItem = item.SuperTip.Items.Add(s);&#xD;&#xA;                                toolItem.Font = new System.Drawing.Font(item.Font.FontFamily, item.Font.Size, System.Drawing.FontStyle.Bold);&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        string imageName = one.ID;&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(ti.Template))&#xD;&#xA;                            imageName = one.ID + ti.Template;&#xD;&#xA;                        if (!string.IsNullOrEmpty(ti.MenuInfo.MenuIcon))&#xD;&#xA;                        {&#xD;&#xA;                            item.Glyph = System.Drawing.Image.FromFile(ti.MenuInfo.MenuIcon);&#xD;&#xA;                            _imageCollection_Tree.AddImage(System.Drawing.Image.FromFile(ti.MenuInfo.MenuIcon), imageName);&#xD;&#xA;                        }&#xD;&#xA;                        if (!string.IsNullOrEmpty(ti.MenuInfo.MenuIconLarge))&#xD;&#xA;                            item.LargeGlyph = System.Drawing.Image.FromFile(ti.MenuInfo.MenuIconLarge);&#xD;&#xA;                        if (ti.MenuInfo.MenuImg != null)&#xD;&#xA;                        {&#xD;&#xA;                            item.Glyph = ti.MenuInfo.MenuImg;&#xD;&#xA;                            _imageCollection_Tree.AddImage(ti.MenuInfo.MenuImg, imageName);&#xD;&#xA;                        }&#xD;&#xA;                        if (ti.MenuInfo.MenuImgLarge != null)&#xD;&#xA;                            item.LargeGlyph = ti.MenuInfo.MenuImgLarge;&#xD;&#xA;&#xD;&#xA;                        item.ItemClick += NewModule_Click;&#xD;&#xA;                        item.Tag = ti;&#xD;&#xA;                        //item.Enabled = false;&#xD;&#xA;&#xD;&#xA;                        group.Ribbon.Items.Add(item);&#xD;&#xA;                        group.ItemLinks.Add(item);&#xD;&#xA;&#xD;&#xA;                        _templates.Add(ti);&#xD;&#xA;                        index++;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                for (int i = 0; i &lt; _applicationInfo.Modules.Count; i++)&#xD;&#xA;                {&#xD;&#xA;                    IBxFunctionModule one = _applicationInfo.Modules[i];&#xD;&#xA;                    IBxModuleTemplateInfo ti = null;&#xD;&#xA;                    for (int j = 0; j &lt; _applicationInfo.Templates[i].Count; j++)&#xD;&#xA;                    {&#xD;&#xA;                        bool show = false;&#xD;&#xA;                        int tIndex = 0;&#xD;&#xA;                        foreach (IBxModuleTemplateInfo ti1 in one.ModuleTemplates)&#xD;&#xA;                        {&#xD;&#xA;                            if (string.IsNullOrWhiteSpace(_applicationInfo.Templates[i][j]) || _applicationInfo.Templates[i][j] == ti1.Template)&#xD;&#xA;                            {&#xD;&#xA;                                show = true;&#xD;&#xA;                                tIndex = j;&#xD;&#xA;                                ti = ti1;&#xD;&#xA;                                break;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                        if (!show)&#xD;&#xA;                            continue;&#xD;&#xA;                        string pageInfo = ti.MenuInfo.PageName;&#xD;&#xA;                        string groupInfo = ti.MenuInfo.GroupName;&#xD;&#xA;                        string nameInfo = ti.MenuInfo.Name;&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(_applicationInfo.Pages[i][tIndex]))&#xD;&#xA;                            pageInfo = _applicationInfo.Pages[i][tIndex];&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(_applicationInfo.Groups[i][tIndex]))&#xD;&#xA;                            groupInfo = _applicationInfo.Groups[i][tIndex];&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(_applicationInfo.Names[i][tIndex]))&#xD;&#xA;                            nameInfo = _applicationInfo.Names[i][tIndex];&#xD;&#xA;&#xD;&#xA;                        //nameInfo = nameInfo.Replace(&quot;&amp;&quot;, &quot;&amp;&amp;&quot;);&#xD;&#xA;&#xD;&#xA;                        page = bar.HeadPageByName(pageInfo);&#xD;&#xA;                        if (page == null)&#xD;&#xA;                            page = bar.AddHeadPage(pageInfo);&#xD;&#xA;&#xD;&#xA;                        group = page.GetGroupByName(groupInfo);&#xD;&#xA;                        if (group == null)&#xD;&#xA;                        {&#xD;&#xA;                            group = new RibbonPageGroup(groupInfo);&#xD;&#xA;                            group.AllowTextClipping = false;&#xD;&#xA;                            group.ShowCaptionButton = false;&#xD;&#xA;                            page.Groups.Add(group);&#xD;&#xA;                            group.Name = groupInfo;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        item = new BarButtonItem();&#xD;&#xA;                        item.Id = index;&#xD;&#xA;                        item.Caption = nameInfo;&#xD;&#xA;                        if (ti.MenuInfo.HelpString.Count &gt; 0)&#xD;&#xA;                        {&#xD;&#xA;                            item.SuperTip = new SuperToolTip();&#xD;&#xA;                            foreach (string s in ti.MenuInfo.HelpString)&#xD;&#xA;                            {&#xD;&#xA;                                ToolTipItem toolItem = item.SuperTip.Items.Add(s);&#xD;&#xA;                                toolItem.Font = new System.Drawing.Font(item.Font.FontFamily, item.Font.Size, System.Drawing.FontStyle.Bold);&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        string imageName = one.ID;&#xD;&#xA;                        if (!string.IsNullOrWhiteSpace(ti.Template))&#xD;&#xA;                            imageName = one.ID + ti.Template;&#xD;&#xA;                        if (!string.IsNullOrEmpty(ti.MenuInfo.MenuIcon))&#xD;&#xA;                        {&#xD;&#xA;                            item.Glyph = System.Drawing.Image.FromFile(ti.MenuInfo.MenuIcon);&#xD;&#xA;                            _imageCollection_Tree.AddImage(System.Drawing.Image.FromFile(ti.MenuInfo.MenuIcon), imageName);&#xD;&#xA;                        }&#xD;&#xA;                        if (!string.IsNullOrEmpty(ti.MenuInfo.MenuIconLarge))&#xD;&#xA;                            item.LargeGlyph = System.Drawing.Image.FromFile(ti.MenuInfo.MenuIconLarge);&#xD;&#xA;                        if (ti.MenuInfo.MenuImg != null)&#xD;&#xA;                        {&#xD;&#xA;                            item.Glyph = ti.MenuInfo.MenuImg;&#xD;&#xA;                            _imageCollection_Tree.AddImage(ti.MenuInfo.MenuImg, imageName);&#xD;&#xA;                        }&#xD;&#xA;                        if (ti.MenuInfo.MenuImgLarge != null)&#xD;&#xA;                            item.LargeGlyph = ti.MenuInfo.MenuImgLarge;&#xD;&#xA;&#xD;&#xA;                        item.ItemClick += NewModule_Click;&#xD;&#xA;                        item.Tag = ti;&#xD;&#xA;                        //item.Enabled = false;&#xD;&#xA;&#xD;&#xA;                        group.Ribbon.Items.Add(item);&#xD;&#xA;                        group.ItemLinks.Add(item);&#xD;&#xA;&#xD;&#xA;                        _templates.Add(ti);&#xD;&#xA;                        index++;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            _lastStartMenuIndex -= 1;&#xD;&#xA;&#xD;&#xA;            index = 9999;&#xD;&#xA;            //窗口管理&#xD;&#xA;            groupView = pageStart.GetGroupByName(_rs.TextByID(StringID.Group_View));&#xD;&#xA;            if (groupView == null)&#xD;&#xA;            {&#xD;&#xA;                groupView = new RibbonPageGroup(_rs.TextByID(StringID.Group_View));&#xD;&#xA;                groupView.AllowTextClipping = false;&#xD;&#xA;                groupView.ShowCaptionButton = false;&#xD;&#xA;                pageStart.Groups.Add(groupView);&#xD;&#xA;                groupView.Name = _rs.TextByID(StringID.Group_View);&#xD;&#xA;            }&#xD;&#xA;            RepositoryItemCheckEdit riceFilterView = new RepositoryItemCheckEdit();&#xD;&#xA;            riceFilterView.AllowGrayed = false;&#xD;&#xA;            riceFilterView.CheckedChanged += new EventHandler(ProjectWindow_Click);&#xD;&#xA;            BarEditItem projectItem = new BarEditItem();&#xD;&#xA;            projectItem.Id = index;&#xD;&#xA;            index--;&#xD;&#xA;            projectItem.Caption = _rs.TextByID(StringID.ProjectManager);&#xD;&#xA;            projectItem.CaptionAlignment = HorzAlignment.Far;&#xD;&#xA;            projectItem.Edit = riceFilterView;&#xD;&#xA;            projectItem.EditValue = true;&#xD;&#xA;            projectItem.Width = 20;&#xD;&#xA;            groupView.Ribbon.Items.Add(projectItem);&#xD;&#xA;            groupView.ItemLinks.Add(projectItem);&#xD;&#xA;            RepositoryItemCheckEdit logView = new RepositoryItemCheckEdit();&#xD;&#xA;            logView.AllowGrayed = false;&#xD;&#xA;            logView.CheckedChanged += new EventHandler(LogWindow_Click);&#xD;&#xA;            BarEditItem caseItem = new BarEditItem();&#xD;&#xA;            caseItem.Id = index;&#xD;&#xA;            index--;&#xD;&#xA;            caseItem.Caption = _rs.TextByID(StringID.LogWin);&#xD;&#xA;            caseItem.CaptionAlignment = HorzAlignment.Far;&#xD;&#xA;            caseItem.Edit = logView;&#xD;&#xA;            caseItem.EditValue = true;&#xD;&#xA;            caseItem.Width = 20;&#xD;&#xA;            groupView.Ribbon.Items.Add(caseItem);&#xD;&#xA;            groupView.ItemLinks.Add(caseItem);&#xD;&#xA;&#xD;&#xA;            if (_applicationInfo.ID != &quot;ProdAna&quot; &amp;&amp; _applicationInfo.ID != &quot;ProdAnaforGas&quot;)&#xD;&#xA;            {&#xD;&#xA;                groupView = pageStart.GetGroupByName(_rs.TextByID(StringID.FunctionConfig));&#xD;&#xA;                if (groupView == null)&#xD;&#xA;                {&#xD;&#xA;                    groupView = new RibbonPageGroup(_rs.TextByID(StringID.FunctionConfig));&#xD;&#xA;                    groupView.AllowTextClipping = false;&#xD;&#xA;                    groupView.ShowCaptionButton = false;&#xD;&#xA;                    pageStart.Groups.Add(groupView);&#xD;&#xA;                    groupView.Name = _rs.TextByID(StringID.FunctionConfig);&#xD;&#xA;                }&#xD;&#xA;                itemT = new BarButtonItem();&#xD;&#xA;                itemT.Id = index;&#xD;&#xA;                index--;&#xD;&#xA;                itemT.Caption = _rs.TextByID(StringID.FunctionConfig);&#xD;&#xA;                itemT.LargeGlyph = global::TestApp1.Properties.Resources.Config;&#xD;&#xA;                itemT.ItemClick += FunctionConfig_Click;&#xD;&#xA;                groupView.Ribbon.Items.Add(itemT);&#xD;&#xA;                groupView.ItemLinks.Add(itemT);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            itemT = new BarButtonItem();&#xD;&#xA;            itemT.Id = index;&#xD;&#xA;            index--;&#xD;&#xA;            itemT.Caption = StringResource.TextByID(StringID.SwitchLan);&#xD;&#xA;            PopupControlContainer container = new PopupControlContainer();&#xD;&#xA;            //container.ShowSizeGrip = true;&#xD;&#xA;            container.CloseOnOuterMouseClick = false;&#xD;&#xA;            container.Size = _switchLanForm.Size;&#xD;&#xA;            _switchLanForm.Dock = DockStyle.Fill;&#xD;&#xA;            container.Popup += new EventHandler(container_Popup);&#xD;&#xA;            _switchLanForm.okButton.Click += new EventHandler(SwitchLan_Click);&#xD;&#xA;            _switchLanForm.imageComboBoxEdit1.SelectedIndexChanged += new EventHandler(lanComboBox_SelectedIndexChanged);&#xD;&#xA;            container.Controls.Add(_switchLanForm);&#xD;&#xA;            itemT.DropDownEnabled = true;&#xD;&#xA;            itemT.ActAsDropDown = true;&#xD;&#xA;            itemT.DropDownControl = container;&#xD;&#xA;            itemT.ButtonStyle = BarButtonStyle.DropDown;&#xD;&#xA;            itemT.LargeGlyph = global::TestApp1.Properties.Resources.SwitchLan_l;&#xD;&#xA;            //itemT.ItemClick += LanSwitch_Click;&#xD;&#xA;            groupView.Ribbon.Items.Add(itemT);&#xD;&#xA;            groupView.ItemLinks.Add(itemT);&#xD;&#xA;&#xD;&#xA;            bar.SelectHeadPage(0);&#xD;&#xA;        }" UseManualLocation="True" />
    <Node Id="反射获取程序集" Bounds="-118,-1525.02773266659,104,25.8366666666666" UseManualLocation="True" />
    <Node Id="核心代码" Bounds="-855.080397782067,-1534.41192778453,67.9999999999999,25.8366666666666" UseManualLocation="True" />
    <Node Id="生成菜单" Bounds="-640.108539769725,-1441.24131010356,68,25.8366666666667" UseManualLocation="True" />
    <Node Id="解析模块" Bounds="-280.28662109375,-1525.02773266659,68,25.8366666666666" UseManualLocation="True" />
  </Nodes>
  <Links>
    <Link Source="反射获取程序集" Target="40b5bbd2-1040-4406-a788-e7469a47df9c1" Bounds="-32.1591885468949,-1545.54654107497,53.7509838671398,20.5188084083788" />
    <Link Source="核心代码" Target="生成菜单" Bounds="-791.274057803905,-1508.57531901042,147.101388393971,63.7550181628344" />
    <Link Source="核心代码" Target="解析模块" Bounds="-787.080413818359,-1520.93855831456,497.794991950461,8.12714787624327" />
    <Link Source="生成菜单" Target="eac775bd-b008-42bc-b713-f69fed0a9aff1" Bounds="-605.829296616284,-1415.4046434369,0.781753336136831,36.1654352352534" />
    <Link Source="解析模块" Target="d2377e18-5c97-42b5-b86a-4b0d6e7dbf2c1" Bounds="-233.484115600586,-1499.19104003906,103.047286987305,129.559448242188" />
    <Link Source="解析模块" Target="反射获取程序集" Bounds="-212.28662109375,-1512.10939933326,85.28662109375,0" />
  </Links>
  <Properties>
    <Property Id="Bounds" DataType="System.Windows.Rect" />
    <Property Id="Label" Label="标签" Description="可批注对象的可显示标签" DataType="System.String" />
    <Property Id="UseManualLocation" DataType="System.Boolean" />
  </Properties>
</DirectedGraph>
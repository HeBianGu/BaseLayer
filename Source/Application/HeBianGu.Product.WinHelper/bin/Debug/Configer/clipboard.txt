[{"_createTime":"\/Date(1490591993257+0800)\/","_detial":"\u000d\u000a\u000d\u000a            } ","_type":1},{"_createTime":"\/Date(1490591990193+0800)\/","_detial":"chartArea","_type":1},{"_createTime":"\/Date(1490591980638+0800)\/","_detial":"chartAreas","_type":1},{"_createTime":"\/Date(1490591977009+0800)\/","_detial":"chartArea","_type":1},{"_createTime":"\/Date(1490591879167+0800)\/","_detial":"cs","_type":1},{"_createTime":"\/Date(1490591873073+0800)\/","_detial":"List<ChartArea>","_type":1},{"_createTime":"\/Date(1490591861978+0800)\/","_detial":"_candybox","_type":1},{"_createTime":"\/Date(1490591859396+0800)\/","_detial":"candyboxs","_type":1},{"_createTime":"\/Date(1490591849493+0800)\/","_detial":"\u000d\u000a\u000d\u000a            }\u000d\u000a","_type":1},{"_createTime":"\/Date(1490591847001+0800)\/","_detial":"_candybox","_type":1},{"_createTime":"\/Date(1490591810253+0800)\/","_detial":"        \/\/\/ <summary> 获取当前活动绘图区域 <\/summary>\u000d\u000a        public ChartArea GetActiveChartArea()\u000d\u000a        {\u000d\u000a\u000d\u000a            CandyBox _candybox = GetActiveCandyBox();\u000d\u000a\u000d\u000a            if (_candybox != null && _candybox.Root != null)\u000d\u000a            {\u000d\u000a                if (_candybox.Root is ChartArea)\u000d\u000a                {\u000d\u000a                    return (_candybox.Root as ChartArea);\u000d\u000a                }\u000d\u000a                else if (_candybox.Root is TDChart)\u000d\u000a                {\u000d\u000a                    \/\/TDChart _tdChart = _candybox.Root as TDChart;\u000d\u000a                    \/\/Widget widget = _tdChart.ChartTable.Children.Find(c => c is ChartArea && c.Selected == true);\u000d\u000a                    if (activateChartArea == null)\u000d\u000a                    {\u000d\u000a                        \/\/return (_candybox.Root as TDChart).Children.Find(l => l.Selected) as ChartArea;\u000d\u000a                        return (_candybox.Root as TDChart).GetChartArea(0, 0);\u000d\u000a                    }\u000d\u000a                    else\u000d\u000a                    {\u000d\u000a                        return activateChartArea;\u000d\u000a                    }\u000d\u000a                }\u000d\u000a            }\u000d\u000a            return null;\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490591756052+0800)\/","_detial":"List<CandyBox>","_type":1},{"_createTime":"\/Date(1490591663016+0800)\/","_detial":" if (WindowsContainer == null)\u000d\u000a            {\u000d\u000a                return null;\u000d\u000a            }\u000d\u000a\u000d\u000a            var activeWindow = WindowsContainer.GetActiveWindow();\u000d\u000a            if (activeWindow == null)\u000d\u000a            {\u000d\u000a                throw new NullReferenceException(\"没有激活的窗口，请重新添加曲线视图！\");\u000d\u000a            }\u000d\u000a\u000d\u000a            CandyBox pCandy = WindowsContainer.GetActiveWindow().Window as CandyBox;\u000d\u000a\u000d\u000a            return pCandy;","_type":1},{"_createTime":"\/Date(1490586908702+0800)\/","_detial":"seri","_type":1},{"_createTime":"\/Date(1490586900542+0800)\/","_detial":"item","_type":1},{"_createTime":"\/Date(1490586896226+0800)\/","_detial":"  lock (series.Points)\u000d\u000a                {\u000d\u000a                    \/\/  加载数据\u000d\u000a                    foreach (CurveData item in tagInfoData.curveData)\u000d\u000a                    {\u000d\u000a                        if (!double.IsNaN(item.dvalue))\u000d\u000a                        {\u000d\u000a                            series.Points.AddXY(item.e_DateTime.ToOADate(), item.dvalue);\u000d\u000a                        }\u000d\u000a                    }\u000d\u000a\u000d\u000a                }","_type":1},{"_createTime":"\/Date(1490586893284+0800)\/","_detial":"series","_type":1},{"_createTime":"\/Date(1490586855075+0800)\/","_detial":"  series = s;","_type":1},{"_createTime":"\/Date(1490584892077+0800)\/","_detial":"format","_type":1},{"_createTime":"\/Date(1490584875742+0800)\/","_detial":" string format = \"yyyyMMdd\";\u000d\u000a            DateTime outTime;\u000d\u000a            DateTime.TryParseExact(str, format, CultureInfo.InvariantCulture,DateTimeStyles.None, out outTime);\u000d\u000a\u000d\u000a            return outTime;","_type":1},{"_createTime":"\/Date(1490584641834+0800)\/","_detial":"ToByte","_type":1},{"_createTime":"\/Date(1490584588831+0800)\/","_detial":"        public static bool ToBool(this IGroupConvertobject o)\u000d\u000a        {\u000d\u000a            return Convert.ToBoolean(o);\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490584343568+0800)\/","_detial":"        \/\/\/ <summary> 转换为Double类型 <\/summary>\u000d\u000a        public static double ToDouble(this object s)\u000d\u000a        {\u000d\u000a            return Convert.ToDouble(s);\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490584296885+0800)\/","_detial":"\u000d\u000a        public static double ToDouble(this string s)\u000d\u000a        {\u000d\u000a            return Convert.ToDouble(s);\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490584170601+0800)\/","_detial":"  public static implicit operator string(myclass mc)\/\/隐式声明的myclass转string类处理方法\u000d\u000a        {\u000d\u000a            return (\"定义的myclass类string类型转化结果\");\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490584163650+0800)\/","_detial":"public static implicit operator myclass(int value)\/\/隐式声明的int转myclass类处理方法\u000d\u000a        {\u000d\u000a            return new myclass(value);\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490584156249+0800)\/","_detial":"public static explicit operator int(myclass mc)\/\/显示声明的myclass转int类处理方法\u000d\u000a        {\u000d\u000a            return mc.value;\u000d\u000a        }","_type":1},{"_createTime":"\/Date(1490584144939+0800)\/","_detial":" class myclass\u000d\u000a    {\u000d\u000a        private int value;\/\/声明value私有字段\u000d\u000a        public int Value\/\/声明只读属性\u000d\u000a        {\u000d\u000a            get { return value; }\u000d\u000a        }\u000d\u000a        public myclass(int value)\/\/构造函数\u000d\u000a        {\u000d\u000a            this.value = value;\u000d\u000a        }\u000d\u000a\u000d\u000a        public static explicit operator int(myclass mc)\/\/显示声明的myclass转int类处理方法\u000d\u000a        {\u000d\u000a            return mc.value;\u000d\u000a        }\u000d\u000a        public static implicit operator myclass(int value)\/\/隐式声明的int转myclass类处理方法\u000d\u000a        {\u000d\u000a            return new myclass(value);\u000d\u000a        }\u000d\u000a        public static implicit operator string(myclass mc)\/\/隐式声明的myclass转string类处理方法\u000d\u000a        {\u000d\u000a            return (\"定义的myclass类string类型转化结果\");\u000d\u000a        }\u000d\u000a    }","_type":1},{"_createTime":"\/Date(1490584129424+0800)\/","_detial":"using System;\u000d\u000ausing System.Collections.Generic;\u000d\u000ausing System.Linq;\u000d\u000ausing System.Text;\u000d\u000a\u000d\u000anamespace 自定义装换\u000d\u000a{\u000d\u000a    class Program\u000d\u000a    {\u000d\u000a        static void Main(string[] args)\u000d\u000a        {\u000d\u000a            myclass mc = 1;\/\/通过隐式装换，生成myclass对象\u000d\u000a            Console.WriteLine(mc.Value);\u000d\u000a            myclass mc2 = new myclass(2);\u000d\u000a            Console.WriteLine((int)mc2);\/\/显示转化，调用myclass至int的处理方法\u000d\u000a            Console.WriteLine(mc2);\/\/隐式转化，调用myclass至string的处理方法\u000d\u000a           \u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000a    class myclass\u000d\u000a    {\u000d\u000a        private int value;\/\/声明value私有字段\u000d\u000a        public int Value\/\/声明只读属性\u000d\u000a        {\u000d\u000a            get { return value; }\u000d\u000a        }\u000d\u000a        public myclass(int value)\/\/构造函数\u000d\u000a        {\u000d\u000a            this.value = value;\u000d\u000a        }\u000d\u000a\u000d\u000a        public static explicit operator int(myclass mc)\/\/显示声明的myclass转int类处理方法\u000d\u000a        {\u000d\u000a            return mc.value;\u000d\u000a        }\u000d\u000a        public static implicit operator myclass(int value)\/\/隐式声明的int转myclass类处理方法\u000d\u000a        {\u000d\u000a            return new myclass(value);\u000d\u000a        }\u000d\u000a        public static implicit operator string(myclass mc)\/\/隐式声明的myclass转string类处理方法\u000d\u000a        {\u000d\u000a            return (\"定义的myclass类string类型转化结果\");\u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000a }","_type":1},{"_createTime":"\/Date(1490584089534+0800)\/","_detial":"public static implicit 目标类型(被转化类型 变量参数)\u000d\u000a{\u000d\u000a   return 目标类型结果;\u000d\u000a}\u000d\u000a\u000d\u000apublic static explicit 目标类型(被转化类型 变量参数)\u000d\u000a{\u000d\u000a   return 目标类型结果;\u000d\u000a}","_type":1}]
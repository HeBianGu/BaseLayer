<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>cldispose</Title>
      <Shortcut>cldispose</Shortcut>
      <Description>继承IDispose类的代码片段</Description>
      <Author>Microsoft Corporation</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>类名</ToolTip>
          <Default>MyClass</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
      /// <summary> 此类的说明 </summary>
     partial class $name$
	   {
		    $selected$$end$
	   }
      partial class $name$ : IDisposable
     {
        #region - 资源释放 -

        //保证重复释放资源时系统异常
        private bool _isDisposed = false;

        // 析构函数，编译器自动生成Finalize()函数由GC自动调用，保证资源被回收。
        // 最好不要声明空析构函数，造成性能问题
        // 如果没有引用非托管资源就不需要显示声明析构函数，会造成性能问题，系统会自动生成默认析构函数
        ~$name$()
        {
            // 此处只需要释放非托管代码即可，因为GC调用时该对象资源可能还不需要释放
            Dispose(false);
        }

        //外部手动调用或者在using中自动调用，同时释放托管资源和非托管资源
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this); ///告诉GC不需要再次调用
        }
        protected virtual void Dispose(bool disposing)
        {
            if (!_isDisposed)
            {
                if (disposing)
                {
                    //释放托管资源
                }
                // 释放非托管资源
                // 释放大对象

                this._isDisposed = true;
            }
        }

        #endregion 
    }
  ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
